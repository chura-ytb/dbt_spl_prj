name: push_trigger_sqlfluff

on: 
    push:
        branches-ignore:
        - 'main'
jobs:
    push:
        runs-on: ubuntu-latest
        # defaults:
        #   run:
        #     working-directory: dbt_spl

        environment: tb_env

        env:
          DWH_TYPE: ${{ secrets.DWH_TYPE }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          # SNOWFLAKE_KEY_PATH: ${{ secrets.SNOWFLAKE_KEY_PATH }}
          SNOWFLAKE_PASSPHRASE: ${{ secrets.SNOWFLAKE_PASSPHRASE }}

        steps:
        - name: Check out
          uses: actions/checkout@v4
          with:
            fetch-depth: 0  # 差分を取得するには全履歴が必要


        - uses: actions/setup-python@v5
          with:
            python-version: "3.12.9"

        - name: Install packages
          run: |
            python -m pip install --upgrade pip
            pip install sqlfluff
            pip install sqlfluff-templater-dbt
            pip install dbt-core dbt-snowflake
        
        - name: Install dependencies
          run: dbt deps

        # - name: execute sqlfluff
        #   run: |
        #     sqlfluff lint models/

        - name: Get changed SQL files (compared to previous commit)
          id: changed
          run: |
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
              | grep '\.sql$' || echo "" > changed_files.txt
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
              | grep '\.sql$' > changed_files.txt || true
            echo "files=$(cat changed_files.txt)" >> $GITHUB_OUTPUT

        - name: Run sqlfluff lint only on changed SQL files
          if: steps.changed.outputs.files != ''
          run: |
            for file in ${{ steps.changed.outputs.files }}; do
              echo "Linting $file"
              sqlfluff lint "$file" || exit 1
            done